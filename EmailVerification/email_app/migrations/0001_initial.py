# Generated by Django 4.0.5 on 2022-06-30 07:30

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import email_app.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('meta_created_ts', models.DateTimeField(auto_now_add=True, db_index=True, null=True, verbose_name='Meta Created TimeStamp')),
                ('meta_updated_ts', models.DateTimeField(auto_now=True, db_index=True, null=True, verbose_name='Meta Updated TimeStamp')),
                ('email', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('title', models.CharField(blank=True, max_length=10, null=True)),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, max_length=100, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('goal', models.CharField(blank=True, max_length=500, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('existing_gym', models.CharField(blank=True, max_length=100, null=True)),
                ('diet_type', models.IntegerField(blank=True, choices=[(1, 'Vegetarian'), (2, 'Non Vegetarian'), (3, 'Eggitarian')], default=1, null=True)),
                ('profile_picture', models.ImageField(blank=True, max_length=200, null=True, upload_to=email_app.models.profile_image_path)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_date', models.DateField(default=datetime.date.today)),
                ('modified_date', models.DateField(default=datetime.date.today)),
                ('is_send_email', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
